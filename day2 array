import numpy as np
import numpy as np
#Numpy (Universal Array Function)
​
#1 Create a NumPy array with shape (3,3) and fill it with random numbers.Use the
#np.exp()function to compute the exponential of each element in the array.
oi=np.random.rand(3,3)
np.exp(oi)
​
array([[1.91016226, 1.04092712, 2.04926361],
       [1.88375395, 1.30671276, 2.11164085],
       [1.93685748, 1.77321699, 1.83600193]])
#2 Create a NumPy array with shape (4,4) and fill it with random numbers.
#Use the np.sin() function to compute the sine of each element in the array.
oa=np.random.rand(4,4)
np.sin(oa)
array([[0.06635404, 0.08900617, 0.31752554, 0.64359398],
       [0.11558664, 0.39693839, 0.01137396, 0.58171831],
       [0.01080762, 0.66623858, 0.36264978, 0.05127671],
       [0.21730152, 0.64046377, 0.09341631, 0.51951004]])
#3 Create a NumPy array with shape (5,5) and fill it with random numbers.
#Use the np.log() function to compute the natural logarithm of each element in the array.
ob=np.random.rand(5,5)
np.log(ob)
array([[-1.0366649 , -0.81833663, -0.3664729 , -0.88816328, -0.70000328],
       [-3.54082331, -0.59562196, -0.83631864, -0.59798017, -2.13836161],
       [-0.20412593, -0.91814067, -0.64519001, -0.55987941, -1.14725906],
       [-1.58634542, -0.99824529, -1.33984137, -0.20915119, -0.25954573],
       [-1.2614365 , -0.06630061, -1.4497396 , -0.38069979, -1.23453199]])
#4 Create a NumPy array with shape (2,2) and fill it with random numbers.
#Use the np.sqrt() function to compute the square root of each element in the array.
oc=np.random.rand(2,2)
np.log(oc)
array([[-0.05460688, -0.04579066],
       [-0.05709678, -0.17815564]])
#5 Create a NumPy array with shape (6,6) and fill it with random numbers.
#Use the np.floor() function to round down each element in the array to the nearest integer.
od=np.random.rand(6,6)
np.floor(od)
array([[0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.]])
#6 Create a NumPy array with shape (3,3) and fill it with random numbers.
#Use the np.abs() function to compute the absolute value of each element in the array.
oe=np.random.rand(6,6)
np.abs(oe)
array([[0.40489591, 0.46526204, 0.89309525, 0.29495902, 0.43072398,
        0.13195713],
       [0.8688289 , 0.68100564, 0.88715218, 0.22791548, 0.68058746,
        0.43266884],
       [0.49106356, 0.57793959, 0.67719358, 0.13814842, 0.03660726,
        0.07508366],
       [0.6331329 , 0.67407307, 0.27047946, 0.62511753, 0.35185665,
        0.989759  ],
       [0.42604843, 0.50737555, 0.72355766, 0.91623628, 0.21390317,
        0.30330372],
       [0.88658688, 0.74627299, 0.50639848, 0.1794337 , 0.99169444,
        0.13536015]])
#7 Create a NumPy array with shape (4,4) and fill it with random numbers.
#Use the np.power() function to raise each element in the array to the power of 2.
of=np.random.rand(4,4)
np.power(of,2)
array([[1.60546389e-01, 3.80248247e-01, 8.91428010e-02, 3.38243826e-01],
       [5.28687212e-02, 2.87590046e-01, 9.57230100e-01, 1.68762782e-01],
       [1.27310246e-04, 8.02635578e-03, 1.41877854e-02, 1.21022711e-02],
       [1.88525303e-01, 7.19108407e-01, 3.65809074e-01, 3.73328466e-01]])
#8 Create a NumPy array with 5 random integers between 1 and 10.
#Use the maximum function to find the largest element in the array.
t=np.random.randint(low=0, high=5, size=5)
np.max(t)
​
​
2
#9 Create a NumPy array with 10 random floating-point numbers between 0 and 1.
#Use the round function to round each element to the nearest integer.
ta=np.random.uniform(low=0, high=1, size=10)
np.round(ta)
array([1., 1., 0., 0., 1., 0., 1., 1., 1., 0.])
#10 Create a NumPy array with 7 random integers between 1 and 100. Use the argmax 
#function find the index of the largest element in the array.
tb=np.random.randint(low=1, high=100, size=7)
np.argmax(tb)
1
#11 Create two NumPy arrays with the same shape, each filled with random
#integers between 1 and 10. Use the add function to add the two arrays together element-wise.
xi=np.random.rand(3,3)
xb=np.random.rand(3,3)
np.add(xi,xb)
​
array([[0.80716643, 0.55928271, 0.74019752],
       [1.7799992 , 0.76240615, 1.48075765],
       [0.65457254, 0.78240493, 0.41681152]])
#12 Create a NumPy array with 12 random integers between 0 and 100. 
#Use the clip function to limit the values in the array to a range
#between 10 and 90.
to=np.random.randint(low=0, high=100, size=12)
np.clip(to)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp\ipykernel_6284\3613216545.py in <module>
      3 #between 10 and 90.
      4 to=np.random.randint(low=0, high=100, size=12)
----> 5 np.clip(to)

<__array_function__ internals> in clip(*args, **kwargs)

TypeError: _clip_dispatcher() missing 2 required positional arguments: 'a_min' and 'a_max'

​
arr = np.arange(11)
arr
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
np.sqrt(arr)
array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ,
       3.16227766])
np.exp(arr)
array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,
       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,
       2.98095799e+03, 8.10308393e+03, 2.20264658e+04])
np.random.randn(5)
array([-0.63598653, -0.32019567, -0.48305648,  2.05793192,  1.60569242])
A=np.random.randint(5,100,20)
B=np.random.randint(5,10,20)
print(A)
print(B)
[90 25 29 70 24 60 23 74 94 32 72 24 72 90 70 66 58 55 38 13]
[5 9 7 5 8 5 9 9 5 5 8 8 5 7 6 6 6 7 5 6]
np.maximum(A,B)
array([90, 25, 29, 70, 24, 60, 23, 74, 94, 32, 72, 24, 72, 90, 70, 66, 58,
       55, 38, 13])
from numpy.random import randn
Q=np.array([1,2,3,4])
E=np.array([100,200,300,400])
condition=np.array([True,True,False,False])
ans=np.where(condition,Q,E)
ans
array([  1,   2, 300, 400])
rand=randn(4,4)
rand
array([[-2.10701739, -1.01813917,  0.45908831,  0.0231343 ],
       [ 0.40436767,  1.29610068, -0.24511808,  0.46587218],
       [-0.29664613,  0.07220114,  0.33023949,  0.02120161],
       [ 1.63351125,  0.10775182, -0.56979629, -0.7719565 ]])
np.where(rand<0,0,rand)
array([[0.        , 0.        , 0.45908831, 0.0231343 ],
       [0.40436767, 1.29610068, 0.        , 0.46587218],
       [0.        , 0.07220114, 0.33023949, 0.02120161],
       [1.63351125, 0.10775182, 0.        , 0.        ]])
#Numpy (Array Processing)
#1 Create a NumPy array with 10 random integers between 0 and 100.
x=np.random.randint(0,100,10)
x
array([99, 13, 84, 16,  5, 29, 46,  4, 85, 76])
#2 Use the np.where() function to create a new array with the same shape as 
#the previous one,where values less than 50 are replaced with -1 and
#values greater than or equal to 50 are replaced with 1.
np.where(x<50,-1,1)
array([ 1, -1,  1, -1, -1, -1, -1, -1,  1,  1])
#3 Calculate the mean, median, and standard deviation of the original array.
r=np.random.randint(5,100,20)
r
array([77, 93, 20, 61, 71,  8, 55, 88, 26, 82, 24, 68, 26, 66, 58, 30, 42,
       88, 63, 49])
r.sum()
1095
r.std()
24.89553172760124
r.var()
619.7875
print(np.sort(r))
[ 8 20 24 26 26 30 42 49 55 58 61 63 66 68 71 77 82 88 88 93]
#5 Sort the original array in ascending order
print(-np.sort(r))
[ -8 -20 -24 -26 -26 -30 -42 -49 -55 -58 -61 -63 -66 -68 -71 -77 -82 -88
 -88 -93]
print(np.sort(-r))
[-93 -88 -88 -82 -77 -71 -68 -66 -63 -61 -58 -55 -49 -42 -30 -26 -26 -24
 -20  -8]
#6 Find the unique values in the original array
print(np.unique(r))
[ 8 20 24 26 30 42 49 55 58 61 63 66 68 71 77 82 88 93]
arr_2d=np.array(([5,10,15],[20,25,30],[35,40,45]))
arr_2d
​
array([[ 5, 10, 15],
       [20, 25, 30],
       [35, 40, 45]])
arr_2d[:3,1:]
​
array([[10, 15],
       [25, 30],
       [40, 45]])
 #4 Create a boolean array that is True where the values in the original array are even, and False otherwise.
k =np.array([[42,56,89,65],
            [99,88,42,12],
            [55,42,17,18]])
np.inld()
    
  File "C:\Users\user\AppData\Local\Temp\ipykernel_6284\2306622485.py", line 5
    print(k%=0,k)
           ^
SyntaxError: invalid syntax


#7 Use the np.in1d() function to create a boolean array indicating which elements of the original
#array are also present in a new array with 5 random integers between 0 and 100.
k =np.array([[42,56,89,65],
            [99,88,42,12],
            [55,42,17,18]])
np.in1d([42,88,10,0,12],k)
array([ True,  True, False, False,  True])
